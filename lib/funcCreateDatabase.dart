import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:postgres/postgres.dart';
import 'package:short_uuids/short_uuids.dart';
import 'package:tamannaretail/readCnn.dart';
import 'package:tamannaretail/publicMethod.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:tamannaretail/publicVariable.dart';

class CreateDB {
  static ShortUuid short = ShortUuid();
  static String dbUniqueID =
      "tamanna_${CreateDB.short.generate()}".toLowerCase();
  CreateDB.privateConstructor();
  static final CreateDB instance = CreateDB.privateConstructor();
}

class CheckDB {
  static List<Map> database = [];
  static var noOfRecord;
}

Future createDatabaseYear(var year) async {
  DBConnection.DBName = '${CreateDB.dbUniqueID}_$year';
  try {
    var a =
        (PostGresSqlConnect.connectionWithDB == true) ? sqlQueryDB : sqlQuery;
    await a("CREATE DATABASE ${DBConnection.DBName};", []);
    await a("DROP EXTENSION IF EXISTS dblink;", []);
    await a("CREATE EXTENSION dblink;", []);
    await a(
        "SELECT dblink_connect('conn', 'host=${DBConnection.Host} port=${DBConnection.Port} dbname= ${DBConnection.DBName} user=${DBConnection.UserName} password=${DBConnection.Password}');",
        []);
    // create table here
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.country_master(country_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),country_name character varying(100) COLLATE pg_catalog.default,country_short_name character varying(5) COLLATE pg_catalog.default,country_code character varying(5) COLLATE pg_catalog.default,currency_code character varying(5) COLLATE pg_catalog.default ,currency_symbol character varying(5) COLLATE pg_catalog.default ,currency_placement character varying(5) COLLATE pg_catalog.default,continent character varying(50) COLLATE pg_catalog.default,lat character varying(15) COLLATE pg_catalog.default ,long character varying(15) COLLATE pg_catalog.default ,status smallint,is_blacklisted smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT country_master_pkey PRIMARY KEY (country_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.country_master OWNER to postgres; CREATE INDEX IF NOT EXISTS country_master_country_id_index ON public.country_master USING btree (country_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.state_master( state_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), country_id integer, state_name character varying(100) COLLATE pg_catalog.default, state_short_name character varying(5) COLLATE pg_catalog.default, gst_state_code character varying(5) COLLATE pg_catalog.default, lat character varying(15) COLLATE pg_catalog.default, long character varying(15) COLLATE  pg_catalog.default, status smallint, is_blacklisted smallint, added_by integer, modified_by integer, is_hidden smallint, date_added timestamp without time zone, date_modified timestamp without time zone, CONSTRAINT state_master_pkey PRIMARY KEY (state_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.state_master OWNER to postgres; CREATE INDEX IF NOT EXISTS fki_country_fk ON public.state_master USING btree(country_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS state_master_state_id_index ON public.state_master USING btree (state_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.district_master(district_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),state_id integer,district_name character varying(100) COLLATE pg_catalog.default,district_short_name character varying(5) COLLATE pg_catalog.default,lat character varying(15) COLLATE pg_catalog.default,long character varying(15) COLLATE pg_catalog.default,status smallint,is_blacklisted smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT district_master_pkey PRIMARY KEY (district_id),CONSTRAINT state_fk FOREIGN KEY (state_id)REFERENCES public.state_master (state_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.district_master OWNER to postgres; CREATE INDEX IF NOT EXISTS district_master_district_id_index ON public.district_master USING btree (district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_state_fk ON public.district_master USING btree (state_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.city_master(city_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),district_id integer,state_id integer,city_name character varying(100) COLLATE pg_catalog.default,city_short_name character varying(5) COLLATE pg_catalog.default,lat character varying(15) COLLATE pg_catalog.default,long character varying(15) COLLATE pg_catalog.default,status smallint,is_blacklisted smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT city_master_pkey PRIMARY KEY (city_id),CONSTRAINT state_fk FOREIGN KEY (state_id) REFERENCES public.state_master (state_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.city_master OWNER to postgres; CREATE INDEX IF NOT EXISTS city_master_city_id_index ON public.city_master USING btree (city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_city_state_fk ON public.city_master USING btree (state_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.area_master(area_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),name character varying(50) COLLATE pg_catalog.default,city_id integer,lat character varying(15) COLLATE pg_catalog.default,long character varying(15) COLLATE pg_catalog.default,sort_order integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT area_master_pkey PRIMARY KEY (area_id),CONSTRAINT city_fk FOREIGN KEY (city_id) REFERENCES public.city_master (city_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE)TABLESPACE pg_default; ALTER TABLE IF EXISTS public.area_master OWNER to postgres;CREATE INDEX IF NOT EXISTS area_master_area_id_index ON public.area_master USING btree(area_id ASC NULLS LAST)TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_area_city_fk ON public.area_master USING btree(city_id ASC NULLS LAST)TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.market_master(market_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,market_name character varying(50) COLLATE pg_catalog.default NOT NULL,area_id integer NOT NULL,city_id integer NOT NULL,lat character varying(15) COLLATE pg_catalog.default,long character varying(15) COLLATE pg_catalog.default,sort_order integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT market_master_pkey PRIMARY KEY (market_id),CONSTRAINT area_fk FOREIGN KEY (area_id) REFERENCES public.area_master (area_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE,CONSTRAINT city_fk FOREIGN KEY (city_id) REFERENCES public.city_master (city_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.market_master OWNER to postgres; CREATE INDEX IF NOT EXISTS fki_market_area_fk ON public.market_master USING btree (area_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_market_city_fk ON public.market_master USING btree (city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS market_master_company_id_index ON public.market_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS market_master_market_id_index ON public.market_master USING btree (market_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.mediator_master(mediator_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,gstin character varying(15) COLLATE pg_catalog.default,receiver_name character varying(50) COLLATE pg_catalog.default,type_of_supplier integer,gst_reg_date date,gst_update_date date,mediator_name character varying(50) COLLATE pg_catalog.default,master_for integer,address_1 character varying(255) COLLATE pg_catalog.default,address_2 character varying(255) COLLATE pg_catalog.default,address_3 character varying(255) COLLATE pg_catalog.default,district_id integer,city_id integer,market_id integer,city_pincode bigint,phone character varying(15) COLLATE pg_catalog.default,mobile character varying(15) COLLATE pg_catalog.default,whatsapp character varying(15) COLLATE pg_catalog.default,website character varying(255) COLLATE pg_catalog.default,resident character varying(255) COLLATE pg_catalog.default,aadhaar_card_number bigint,aadhaar_card_attachment character varying(255) COLLATE pg_catalog.default,pan_number character varying(15) COLLATE pg_catalog.default,pan_ward_no character varying(255) COLLATE pg_catalog.default,pan_attachment character varying(255) COLLATE pg_catalog.default,tin_number character varying(15) COLLATE pg_catalog.default,tin_attachment character varying(255) COLLATE pg_catalog.default,is_tds_applicable smallint,contact_person_name character varying(255) COLLATE pg_catalog.default,cess_applicable smallint,dob date,doa date,business_established_date date,bank_name character varying(255) COLLATE pg_catalog.default,bank_account_number bigint,ifsc_code character varying(20) COLLATE pg_catalog.default,is_blacklisted smallint,sort_order integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT mediator_master_pkey PRIMARY KEY (mediator_id),CONSTRAINT city_fk FOREIGN KEY (city_id) REFERENCES public.city_master (city_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT district_fk FOREIGN KEY (district_id) REFERENCES public.district_master (district_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE,CONSTRAINT market_fk FOREIGN KEY (market_id) REFERENCES public.market_master (market_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.mediator_master OWNER to postgres; CREATE INDEX IF NOT EXISTS fki_city_fk ON public.mediator_master USING btree (city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_district_fk ON public.mediator_master USING btree (district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS fki_market_fk ON public.mediator_master USING btree (market_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS mediator_master_company_id_index ON public.mediator_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS mediator_master_mediator_id_index ON public.mediator_master USING btree (mediator_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.account_final_applicable_master(account_final_applicable_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),account_final_applicable_name character varying(50) COLLATE pg_catalog.default NOT NULL,sort_order integer,CONSTRAINT account_final_applicable_master_pkey PRIMARY KEY (account_final_applicable_id))TABLESPACE pg_default;  ALTER TABLE IF EXISTS public.account_final_applicable_master OWNER to postgres; CREATE INDEX IF NOT EXISTS account_final_applicable_master_account_final_applicable_id_ind ON public.account_final_applicable_master USING btree(account_final_applicable_id ASC NULLS LAST)TABLESPACE pg_default');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.company_master(company_id bigint GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),gstin character varying(15) COLLATE pg_catalog.default,receiver_name character varying(50) COLLATE pg_catalog.default,type_of_supplier integer,gst_reg_date date, gst_update_date date,company_name character varying(50) COLLATE pg_catalog.default,address_1 character varying(255) COLLATE pg_catalog.default,address_2 character varying(255) COLLATE pg_catalog.default,address_3 character varying(255) COLLATE pg_catalog.default,district_id integer,city_id integer,market_id integer,city_pincode bigint,phone character varying(15) COLLATE pg_catalog.default,mobile character varying(15) COLLATE pg_catalog.default,whatsapp character varying(15) COLLATE pg_catalog.default,email character varying(100) COLLATE pg_catalog.default,resident character varying(255) COLLATE pg_catalog.default,aadhaar_card_number bigint,aadhaar_card_attachment character varying(255) COLLATE pg_catalog.default,pan_number character varying(15) COLLATE pg_catalog.default,pan_attachment character varying(255) COLLATE pg_catalog.default,tin_number character varying(15) COLLATE pg_catalog.default,tin_attachment character varying(255) COLLATE pg_catalog.default,cin_number character varying(15) COLLATE pg_catalog.default,cin_attachment character varying(255) COLLATE pg_catalog.default,aadhaar_udhyog_id bigint,aadhaar_udhyog_attachment character varying(255) COLLATE pg_catalog.default,gumasta_registration_number character varying(25) COLLATE pg_catalog.default,gumasta_attachment character varying(255) COLLATE pg_catalog.default,company_sign_text character varying(255) COLLATE pg_catalog.default,contact_person_name character varying(255) COLLATE pg_catalog.default,dob date,doa date,company_address_type_master_id integer,copy_master_for_existing_company character varying(255) COLLATE pg_catalog.default,company_logo character varying(255) COLLATE pg_catalog.default,rounding_off_account_id integer,sort_order smallint,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT company_master_pkey PRIMARY KEY (company_id))TABLESPACE pg_default;ALTER TABLE IF EXISTS public.company_master OWNER to postgres;CREATE INDEX IF NOT EXISTS company_master_city_id_index ON public.company_master USING btree (city_id ASC NULLS LAST) TABLESPACE pg_default;CREATE INDEX IF NOT EXISTS company_master_company_id_index ON public.company_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default;CREATE INDEX IF NOT EXISTS company_master_district_id_index ON public.company_master USING btree (district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS company_master_market_id_index ON public.company_master USING btree (market_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.account_final_type_master(account_type_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),account_final_type_name character varying(50) COLLATE pg_catalog.default NOT NULL,sort_order integer,CONSTRAINT account_final_type_master_pkey PRIMARY KEY (account_type_id)) TABLESPACE pg_default;ALTER TABLE IF EXISTS public.account_final_type_master OWNER to postgres;CREATE INDEX IF NOT EXISTS account_final_type_master_account_id_index ON public.account_final_type_master USING btree(account_type_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.account_final_crdr_master(account_final_crdr_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),account_final_type_id integer, account_final_crdr_name character varying(50) COLLATE pg_catalog.default NOT NULL, sort_order integer, CONSTRAINT account_final_crdr_master_pkey PRIMARY KEY (account_final_crdr_id))TABLESPACE pg_default; ALTER TABLE IF EXISTS public.account_final_crdr_master OWNER to postgres; CREATE INDEX IF NOT EXISTS account_final_crdr_master_account_final_crdr_id_index ON public.account_final_crdr_master USING btree(account_final_crdr_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.account_master(account_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer, gstin character varying(15) COLLATE pg_catalog.default, receiver_name character varying(50) COLLATE pg_catalog.default, type_of_supplier integer, gst_reg_date date, gst_update_date date, account_name character varying(50) COLLATE pg_catalog.default, account_type_id integer, group_id integer, agent_id integer, address_1 character varying(255) COLLATE pg_catalog.default, address_2 character varying(255) COLLATE pg_catalog.default, address_3 character varying(255) COLLATE pg_catalog.default, district_id integer, city_id integer, market_id integer, city_pincode bigint, mailing_address_1 character varying(255) COLLATE pg_catalog.default, mailing_address_2 character varying(255) COLLATE pg_catalog.default, mailing_address_3 character varying(255) COLLATE pg_catalog.default, mailing_district_id integer, mailing_city_id integer, mailing_market_id integer, mailing_city_pincode bigint, phone character varying(15) COLLATE pg_catalog.default, mobile character varying(15) COLLATE pg_catalog.default, whatsapp character varying(15) COLLATE pg_catalog.default, email character varying(100) COLLATE pg_catalog.default, website character varying(255) COLLATE pg_catalog.default, resident character varying(255) COLLATE pg_catalog.default, aadhaar_card_number bigint, aadhaar_card_attachment character varying(255) COLLATE pg_catalog.default, pan_number character varying(15) COLLATE pg_catalog.default, pan_attachment character varying(255) COLLATE pg_catalog.default, tin_number character varying(15) COLLATE pg_catalog.default, tin_attachment character varying(255) COLLATE pg_catalog.default, cin_number character varying(15) COLLATE pg_catalog.default, cin_attachment character varying(255) COLLATE pg_catalog.default, aadhaar_udhyog_id bigint, aadhaar_udhyog_attachment character varying(255) COLLATE pg_catalog.default, gumasta_registration_number character varying(25) COLLATE pg_catalog.default, gumasta_attachment character varying(255) COLLATE pg_catalog.default, account_reference_name character varying(50) COLLATE pg_catalog.default, account_reference_mobile_number character varying(15) COLLATE pg_catalog.default, contact_person_name character varying(255) COLLATE pg_catalog.default, dob date, doa date, company_address_type_master_id integer, credit_limit double precision, credit_days integer, is_tds_applicable smallint, tds_type_id integer, gst_supplier_type_id integer, check_credit_days smallint, opening_balance double precision, cr_dr_flag smallint, maintain_bill_by_bill_balancing smallint, default_transport_id integer, default_transport_station integer, sort_order smallint, status smallint, added_by integer, modified_by integer, is_hidden smallint, date_added timestamp without time zone, date_modified timestamp without time zone, CONSTRAINT account_master_pkey PRIMARY KEY (account_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.account_master OWNER to postgres; CREATE INDEX IF NOT EXISTS account_master_account_id_index ON public.account_master USING btree(account_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_account_type_id_index ON public.account_master USING btree(account_type_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_agent_id_index ON public.account_master USING btree(agent_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_city_id_index ON public.account_master USING btree(city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_default_transport_id_index ON public.account_master USING btree(default_transport_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_default_transport_station_index ON public.account_master USING btree(default_transport_station ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_district_id_index ON public.account_master USING btree (district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_group_id_index ON public.account_master USING btree(group_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_mailing_city_id_index ON public.account_master USING btree(mailing_city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_mailing_district_id_index ON public.account_master USING btree (mailing_district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_mailing_market_id_index ON public.account_master USING btree(mailing_market_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS account_master_market_id_index ON public.account_master USING btree(market_id ASC NULLS LAST)TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.account_type_master(account_type_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,account_type_name character varying(50) COLLATE pg_catalog.default NOT NULL,account_final_type_id integer,account_final_crdr_id integer,sort_order integer,account_final_applicable_id integer,parent_account_type_id integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT account_type_master_pkey PRIMARY KEY (account_type_id))TABLESPACE pg_default; ALTER TABLE IF EXISTS public.account_type_master OWNER to postgres; CREATE INDEX IF NOT EXISTS account_type_master_account_type_id_index ON public.account_type_master USING btree (account_type_id ASC NULLS LAST) TABLESPACE pg_default;CREATE INDEX IF NOT EXISTS account_type_master_company_id_index ON public.account_type_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.attribute_group_master(attribute_group_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), company_id integer, attribute_group_name character varying(50) COLLATE pg_catalog.default NOT NULL, sort_order integer, is_predefined smallint, is_locked smallint, status smallint, added_by integer, modified_by integer, is_hidden smallint, date_added timestamp without time zone, date_modified timestamp without time zone, CONSTRAINT attribute_group_master_pkey PRIMARY KEY (attribute_group_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.attribute_group_master OWNER to postgres; CREATE INDEX IF NOT EXISTS attribute_group_master_attribute_group_id_index ON public.attribute_group_master USING btree (attribute_group_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS attribute_group_master_company_id_index ON public.attribute_group_master USING btree(company_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.attribute_master(attribute_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,attribute_group_id integer,attribute_name character varying(50) COLLATE pg_catalog.default NOT NULL,attribute_print_name character varying(50) COLLATE pg_catalog.default,is_predefined smallint,is_locked smallint,sort_order integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT attribute_master_pkey PRIMARY KEY (attribute_id),CONSTRAINT attribute_group_fk FOREIGN KEY (attribute_group_id) REFERENCES public.attribute_group_master(attribute_group_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.attribute_master OWNER to postgres; CREATE INDEX IF NOT EXISTS attribute_group_id_fk ON public.attribute_master USING btree (attribute_group_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS attribute_master_attribute_id_index ON public.attribute_master USING btree (attribute_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS attribute_master_company_id_index ON public.attribute_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.billing_type_master ( billing_type_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 72036854775807 CACHE 1 ),company_id integer,attribute_id integer,account_id integer,gst_supply_type_master_id integer,CONSTRAINT billing_type_pkey PRIMARY KEY (billing_type_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.billing_type_master OWNER to postgres; CREATE INDEX IF NOT EXISTS billing_type_master_account_master_id_index ON public.billing_type_master USING btree (account_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS billing_type_master_attribute_id_index ON public.billing_type_master USING btree (attribute_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS billing_type_master_billing_type_id_index ON public.billing_type_master USING btree (billing_type_id ASC NULLS LAST)TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS billing_type_master_company_id_index ON public.billing_type_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.currency_rate_master(currency_rate_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),country_id_from integer,country_id_to integer,rate double precision,date date,CONSTRAINT currency_rate_master_pkey PRIMARY KEY (currency_rate_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.currency_rate_master OWNER to postgres; CREATE INDEX IF NOT EXISTS currency_rate_master_currency_rate_id_index ON public.currency_rate_master USING btree (currency_rate_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.description_for_gst_master(description_for_gst_master_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,description_for_gst_master_name character varying(50) COLLATE pg_catalog.default,sort_order integer,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT description_for_gst_master_pkey PRIMARY KEY (description_for_gst_master_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.description_for_gst_master OWNER to postgres; CREATE INDEX IF NOT EXISTS description_for_gst_master_company_id_index ON public.description_for_gst_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS description_for_gst_master_gst_id_index ON public.description_for_gst_master USING btree (description_for_gst_master_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.group_master( group_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), company_id integer, group_name character varying(50) COLLATE pg_catalog.default, address_1 character varying(255) COLLATE pg_catalog.default, address_2 character varying(255) COLLATE pg_catalog.default, address_3 character varying(255) COLLATE pg_catalog.default, district_id integer, city_id integer, market_id integer, city_pincode bigint, phone character varying(15) COLLATE pg_catalog.default, mobile character varying(15) COLLATE pg_catalog.default, whatsapp character varying(15) COLLATE pg_catalog.default, email character varying(100) COLLATE pg_catalog.default, resident character varying(255) COLLATE pg_catalog.default, contact_person_name character varying(50) COLLATE pg_catalog.default, discount_percentage double precision, commission_percentage double precision, agent_id integer, sort_order smallint, status smallint, added_by integer, modified_by integer, is_hidden smallint, date_added timestamp without time zone, date_modified timestamp without time zone, CONSTRAINT group_master_pkey PRIMARY KEY (group_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.group_master OWNER to postgres; CREATE INDEX IF NOT EXISTS group_master_city_id_index ON public.group_master USING btree (city_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS group_master_district_id_index ON public.group_master USING btree (district_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS  group_master_group_id_index ON public.group_master USING btree (group_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS group_master_market_id_index ON public.group_master USING btree (market_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.holidays_master(holiday_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,holiday_name character varying(50) COLLATE pg_catalog.default,date date,description text COLLATE pg_catalog.default,sort_order smallint,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT holiday_pkey PRIMARY KEY (holiday_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.holidays_master OWNER to postgres; CREATE INDEX IF NOT EXISTS holiday_master_company_id_index ON public.holidays_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS holiday_master_holiday_id_index ON public.holidays_master USING btree (holiday_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.module_master(module_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),module_name character varying(50) COLLATE pg_catalog.default NOT NULL,slug character varying COLLATE pg_catalog.default,parent_module_id integer,rounding_off_account_id integer,sort_order integer,date_added timestamp without time zone,date_modified timestamp without time zone,added_by integer,modified_by integer,is_hidden integer,CONSTRAINT module_master_pkey PRIMARY KEY (module_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.module_master OWNER to postgres; CREATE INDEX IF NOT EXISTS module_master_module_id_index ON public.module_master USING btree (module_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.non_taxable_add_less_master(non_taxable_add_less_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,module_name character varying(255) COLLATE pg_catalog.default,sort_order smallint,field_name character varying(50) COLLATE pg_catalog.default,field_percentage double precision,field_add_less character varying(50) COLLATE pg_catalog.default,percentage character varying(50) COLLATE pg_catalog.default,multi_formula integer,account_id integer,CONSTRAINT non_taxable_add_less_pkey PRIMARY KEY (non_taxable_add_less_id)) TABLESPACE pg_default;ALTER TABLE IF EXISTS public.non_taxable_add_less_master OWNER to postgres; CREATE INDEX IF NOT EXISTS non_taxable_add_less_master_company_id_index ON public.non_taxable_add_less_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS non_taxable_add_less_master_taxable_add_less_id_index ON public.non_taxable_add_less_master USING btree (non_taxable_add_less_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.policy_master(policy_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,policy_name character varying(100) COLLATE pg_catalog.default NOT NULL,CONSTRAINT policy_master_pkey PRIMARY KEY (policy_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.policy_master OWNER to postgres; CREATE INDEX IF NOT EXISTS policy_master_company_id_index ON public.policy_master USING btree (company_id ASC NULLS LAST)  TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS policy_master_policy_id_index ON public.policy_master USING btree (policy_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.range_description_master(range_description_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,item_range_description_name character varying(100) COLLATE pg_catalog.default NOT NULL,excess_rate integer,screen_rate integer,party_code integer,job_rate integer,CONSTRAINT range_description_master_pkey PRIMARY KEY (range_description_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.range_description_master OWNER to postgres; CREATE INDEX IF NOT EXISTS range_description_master_company_id_index ON public.range_description_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS range_description_master_range_description_id_index ON public.range_description_master USING btree (range_description_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.settings_master( settings_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), company_id integer, settings_name character varying(255) COLLATE pg_catalog.default, settings_value character varying(255) COLLATE pg_catalog.default, status smallint, CONSTRAINT settings_pkey PRIMARY KEY (settings_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.settings_master OWNER to postgres; CREATE INDEX IF NOT EXISTS settings_master_company_id_index  ON public.settings_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS settings_master_settings_id_index ON public.settings_master USING btree (settings_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);

    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.system_users( id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), serial_no integer NOT NULL, machine_id character varying(500) COLLATE pg_catalog.default NOT NULL, user_name character varying(500) COLLATE pg_catalog.default NOT NULL, software_id character varying(500) COLLATE pg_catalog.default NOT NULL, software_type character varying(500) COLLATE pg_catalog.default NOT NULL, software_on character varying(500) COLLATE pg_catalog.default NOT NULL, status character varying(500) COLLATE pg_catalog.default NOT NULL, product_key character varying(500) COLLATE pg_catalog.default NOT NULL, notes text COLLATE pg_catalog.default, remarks text COLLATE pg_catalog.default, CONSTRAINT system_users_pkey PRIMARY KEY (id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.system_users OWNER to postgres;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.tds_type_master( tds_type_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), company_id integer, tds_type_name character varying(100) COLLATE pg_catalog.default NOT NULL, tds_code character varying(50) COLLATE pg_catalog.default NOT NULL, tds_rate_chart_id integer, income_tax double precision, surcharge double precision, education_cess double precision, account_id integer, sort_order integer, is_predefined integer, status integer, added_by integer, modified_by integer, is_hidden integer, date_added timestamp without time zone, date_modified timestamp without time zone, CONSTRAINT tds_type_master_pkey PRIMARY KEY (tds_type_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.tds_type_master OWNER to postgres; CREATE INDEX IF NOT EXISTS tds_type_master_company_id_index ON public.tds_type_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS tds_type_master_tds_type_id_index ON public.tds_type_master USING btree (tds_type_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.tax_master(tax_master_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),tax_master_name character varying(100) COLLATE pg_catalog.default NOT NULL,tax_percentage double precision,sort_order integer,status integer,date_added timestamp without time zone,date_modified timestamp without time zone,added_by integer,modified_by integer,is_hidden integer,CONSTRAINT tax_master_pkey PRIMARY KEY (tax_master_id))TABLESPACE pg_default;ALTER TABLE IF EXISTS public.tax_master OWNER to postgres;CREATE INDEX IF NOT EXISTS tax_master_tax_master_id_index ON public.tax_master USING btree (tax_master_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.taxable_add_less_master(taxable_add_less_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,module_name character varying(255) COLLATE pg_catalog.default,sort_order integer,field_name character varying(50) COLLATE pg_catalog.default,field_percentage double precision,field_add_less character varying(50) COLLATE pg_catalog.default,percentage character varying(50) COLLATE pg_catalog.default,multi_formula integer,account_id integer,CONSTRAINT taxable_add_less_pkey PRIMARY KEY (taxable_add_less_id))TABLESPACE pg_default;ALTER TABLE IF EXISTS public.taxable_add_less_master OWNER to postgres;CREATE INDEX IF NOT EXISTS taxable_add_less_master_company_id_index ON public.taxable_add_less_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default;CREATE INDEX IF NOT EXISTS taxable_add_less_master_taxable_add_less_id_index ON public.taxable_add_less_master USING btree (taxable_add_less_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.tds_rate_master(tds_rate_chart_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),section character varying(10) COLLATE pg_catalog.default,deductee character varying(50) COLLATE pg_catalog.default,nature_of_transaction character varying(500) COLLATE pg_catalog.default,threshold_limit character varying(500) COLLATE pg_catalog.default,tds_rate character varying(50) COLLATE pg_catalog.default,tds_rate_year character varying(50) COLLATE pg_catalog.default,sort_order integer,status integer,CONSTRAINT tds_rate_pkey PRIMARY KEY (tds_rate_chart_id)) TABLESPACE pg_default;ALTER TABLE IF EXISTS public.tds_rate_master OWNER to postgres;CREATE INDEX IF NOT EXISTS tds_rate_master_tds_rate_chart_id_index ON public.tds_rate_master USING btree (tds_rate_chart_id ASC NULLS LAST)TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.uqc_conversion(uqc_conversion_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,attribute_group_id integer,attribute_id_from integer,attribute_id_from_uqc integer,attribute_id_to integer,attribute_id_to_uqc integer,sort_order integer,is_predefined smallint,status smallint,added_by integer,modified_by integer,is_hidden smallint,date_added timestamp without time zone,date_modified timestamp without time zone,CONSTRAINT uqc_conversion_pkey PRIMARY KEY (uqc_conversion_id),CONSTRAINT uqc_attribute_group_id_fk FOREIGN KEY (attribute_group_id) REFERENCES public.attribute_group_master (attribute_group_id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.uqc_conversion OWNER to postgres; CREATE INDEX IF NOT EXISTS uqc_conversion_company_id_index ON public.uqc_conversion USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS uqc_conversion_uqc_conversion_id_index ON public.uqc_conversion USING btree (uqc_conversion_id ASC NULLS LAST)TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.user_group_master(user_group_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),company_id integer,user_group_name character varying(50) COLLATE pg_catalog.default,access_permission smallint,modify_permission smallint,global_permission smallint,delete_permission smallint,export_permission smallint,CONSTRAINT user_group_pkey PRIMARY KEY (user_group_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.user_group_master OWNER to postgres; CREATE INDEX IF NOT EXISTS user_group_master_company_id_index ON public.user_group_master USING btree (company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS user_group_master_user_group_id_index ON public.user_group_master USING btree (user_group_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.user_master( user_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ), company_id integer, user_group_id integer, account_id integer, username character varying(15) COLLATE pg_catalog.default, password character varying(255) COLLATE pg_catalog.default, biometric_value character varying(50) COLLATE pg_catalog.default, allow_user_for_all smallint, company_ids integer, CONSTRAINT user_pkey PRIMARY KEY (user_id)) TABLESPACE pg_default; ALTER TABLE IF EXISTS public.user_master OWNER to postgres; CREATE INDEX IF NOT EXISTS user_master_account_id_index ON public.user_master USING btree(account_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS user_master_company_id_index ON public.user_master USING btree(company_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS user_master_user_group_id_index ON  public.user_master USING btree(user_group_id ASC NULLS LAST) TABLESPACE pg_default; CREATE INDEX IF NOT EXISTS user_master_user_id_index ON public.user_master USING btree (user_id ASC NULLS LAST) TABLESPACE pg_default;');",
        []);
    await a(
        "SELECT dblink_exec('conn', 'CREATE TABLE IF NOT EXISTS public.theme_setting(theme_type character varying COLLATE pg_catalog.default,theme_value character varying COLLATE pg_catalog.default)TABLESPACE pg_default;ALTER TABLE IF EXISTS public.theme_setting OWNER to postgres;');",
        []);

    await a("SELECT dblink_disconnect('conn');", []);
  } catch (e) {
    return [];
  }
}

createYear(BuildContext ctx, String title) {
  List<String> list = <String>[
    (DateTime.now().month <= 3)
        ? '${DateTime.now().year - 2}-${(DateTime.now().year - 1).toString().substring(2, 4)}'
        : '${DateTime.now().year - 1}-${(DateTime.now().year).toString().substring(2, 4)}',
    (DateTime.now().month <= 3)
        ? '${DateTime.now().year - 1}-${DateTime.now().year.toString().substring(2, 4)}'
        : '${DateTime.now().year}-${(DateTime.now().year + 1).toString().substring(2, 4)}',
    (DateTime.now().month <= 3)
        ? '${DateTime.now().year}-${(DateTime.now().year + 1).toString().substring(2, 4)}'
        : '${DateTime.now().year + 1}-${(DateTime.now().year + 2).toString().substring(2, 4)}',
  ];
  String? dropdownValue = list.first;
  return showDialog(
    context: ctx,
    builder: (ctx) {
      return StatefulBuilder(
        builder: (ctx, StateSetter setState) {
          return AlertDialog(
            title: Text(title),
            content: Column(mainAxisSize: MainAxisSize.min, children: <Widget>[
              Text('Do you want to create Year'),
              SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  // ignore: unnecessary_new
                  child: DropdownButton<String>(
                    value: dropdownValue,
                    underline: Container(),
                    items: list.map<DropdownMenuItem<String>>((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                    onChanged: (String? value) {
                      setState(() {
                        dropdownValue = value!;
                      });
                    },
                  )),
            ]),
            actions: <Widget>[
              ElevatedButton(
                child: Text(
                  'Create Database',
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () async {
                  EasyLoading.show(status: "Creating Year...");
                  await createDatabaseYear(dropdownValue!.replaceAll('-', ''));

                  EasyLoading.dismiss();
                  Navigator.of(ctx).pop();
                },
              ),
            ],
          );
        },
      );
    },
  );
}
